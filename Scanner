{
  "cells": [
    {
      "cell_type": "code",
      "source": [
        "from fastapi import FastAPI, File, UploadFile, Form, HTTPException\n",
        "from fastapi.middleware.cors import CORSMiddleware\n",
        "from fastapi.responses import JSONResponse\n",
        "import pandas as pd\n",
        "import os\n",
        "import requests\n",
        "from datetime import datetime\n",
        "import pytz\n",
        "\n",
        "app = FastAPI(title=\"QR Code Scanner and Attendance Tracker\")\n",
        "\n",
        "# Enable CORS so the HTML frontend can access the API\n",
        "app.add_middleware(\n",
        "    CORSMiddleware,\n",
        "    allow_origins=[\"*\"],  # Restrict in production\n",
        "    allow_credentials=True,\n",
        "    allow_methods=[\"*\"],\n",
        "    allow_headers=[\"*\"],\n",
        ")\n",
        "\n",
        "excel_file = 'scanned_qrcode_attendance.xlsx'\n",
        "slots = [\n",
        "    'Morning',\n",
        "    'Evening',\n",
        "    'Lunch - D1',\n",
        "    'Dinner - D1',\n",
        "    'Breakfast - D2'\n",
        "]\n",
        "\n",
        "def load_codes(sheet, df_existing):\n",
        "    if sheet in df_existing:\n",
        "        df = df_existing[sheet]\n",
        "        if 'Scanned QR Data' in df.columns and 'Timestamp' in df.columns:\n",
        "            return dict(zip(df['Scanned QR Data'].astype(str), df['Timestamp'].astype(str)))\n",
        "        else:\n",
        "            return {val: \"\" for val in df['Scanned QR Data'].astype(str)}\n",
        "    else:\n",
        "        return {}\n",
        "\n",
        "def load_slot_codes():\n",
        "    if os.path.exists(excel_file):\n",
        "        try:\n",
        "            df_existing = pd.read_excel(excel_file, sheet_name=None)\n",
        "            return {slot: load_codes(slot, df_existing) for slot in slots}\n",
        "        except Exception:\n",
        "            return {slot: {} for slot in slots}\n",
        "    else:\n",
        "        return {slot: {} for slot in slots}\n",
        "\n",
        "def save_slot_codes(slot_codes):\n",
        "    with pd.ExcelWriter(excel_file) as writer:\n",
        "        for slot in slots:\n",
        "            section_title = f\"{slot} attendance\"\n",
        "            slot_items = list(slot_codes[slot].items())\n",
        "            df_slot = pd.DataFrame(slot_items, columns=['Scanned QR Data', 'Timestamp'])\n",
        "            pd.DataFrame({'': [section_title]}).to_excel(writer, index=False, header=False, sheet_name=slot)\n",
        "            df_slot.to_excel(writer, index=False, startrow=1, sheet_name=slot)\n",
        "\n",
        "@app.post(\"/scan_qr/\")\n",
        "async def scan_qr(\n",
        "    attendance_slot: str = Form(...),\n",
        "    file: UploadFile = File(...)\n",
        "):\n",
        "    if attendance_slot not in slots:\n",
        "        raise HTTPException(status_code=400, detail=\"Invalid slot\")\n",
        "    slot_codes = load_slot_codes()\n",
        "    file_bytes = await file.read()\n",
        "    api_url = \"https://api.qrserver.com/v1/read-qr-code/\"\n",
        "    files = {\"file\": (\"upload.png\", file_bytes, file.content_type)}\n",
        "    try:\n",
        "        res = requests.post(api_url, files=files, timeout=20)\n",
        "        res.raise_for_status()\n",
        "        out = res.json()\n",
        "        result = out[0][\"symbol\"][0][\"data\"]\n",
        "    except Exception:\n",
        "        result = None\n",
        "\n",
        "    if result:\n",
        "        clean = result.strip()\n",
        "        scanned_dict = slot_codes[attendance_slot]\n",
        "        if clean and (clean not in scanned_dict):\n",
        "            ist = pytz.timezone('Asia/Kolkata')\n",
        "            timestamp = datetime.now(ist).strftime('%Y-%m-%d %H:%M:%S')\n",
        "            scanned_dict[clean] = timestamp\n",
        "            save_slot_codes(slot_codes)\n",
        "            return {\"status\": \"marked\", \"message\": f\"{attendance_slot} Attendance marked for: {clean}\", \"timestamp\": timestamp}\n",
        "        elif clean:\n",
        "            timestamp = scanned_dict[clean]\n",
        "            return {\"status\": \"already_marked\", \"message\": f\"{attendance_slot} attendance already marked for: {clean}\", \"timestamp\": timestamp}\n",
        "    return {\"status\": \"fail\", \"message\": \"No QR code detected or unreadable.\"}\n",
        "\n",
        "@app.get(\"/attendance/{slot}\")\n",
        "def get_attendance(slot: str):\n",
        "    if slot not in slots:\n",
        "        raise HTTPException(status_code=400, detail=\"Invalid slot\")\n",
        "    slot_codes = load_slot_codes()\n",
        "    data = slot_codes[slot]\n",
        "    return [{\"data\": k, \"timestamp\": v} for k, v in data.items()]\n",
        "\n",
        "@app.get(\"/attendance/\")\n",
        "def get_all_attendance():\n",
        "    slot_codes = load_slot_codes()\n",
        "    all_attendance = {}\n",
        "    for slot in slots:\n",
        "        data = slot_codes[slot]\n",
        "        all_attendance[slot] = [{\"data\": k, \"timestamp\": v} for k, v in data.items()]\n",
        "    return all_attendance\n",
        "\n",
        "@app.delete(\"/attendance/clear\")\n",
        "def clear_attendance():\n",
        "    if os.path.exists(excel_file):\n",
        "        os.remove(excel_file)\n",
        "        return {\"status\": \"success\", \"message\": \"All attendance data cleared!\"}\n",
        "    else:\n",
        "        return {\"status\": \"info\", \"message\": \"No attendance data file found to clear.\"}\n"
      ],
      "metadata": {
        "id": "tbrhhguar3Wi"
      },
      "id": "tbrhhguar3Wi",
      "execution_count": 1,
      "outputs": []
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    },
    "required_libs": [],
    "colab": {
      "provenance": []
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}